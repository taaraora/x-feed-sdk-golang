// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xfeed_proto/endpoint.proto

package xfeed_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeedClient interface {
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (Feed_StreamEventsClient, error)
	StreamSettlements(ctx context.Context, in *StreamSettlementsRequest, opts ...grpc.CallOption) (Feed_StreamSettlementsClient, error)
	GetSportDescriptions(ctx context.Context, in *SportDescriptionsRequest, opts ...grpc.CallOption) (*SportDescriptionsResponse, error)
}

type feedClient struct {
	cc *grpc.ClientConn
}

func NewFeedClient(cc *grpc.ClientConn) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (Feed_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Feed_serviceDesc.Streams[0], "/xfeed_proto.Feed/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &feedStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Feed_StreamEventsClient interface {
	Recv() (*StreamEventsResponse, error)
	grpc.ClientStream
}

type feedStreamEventsClient struct {
	grpc.ClientStream
}

func (x *feedStreamEventsClient) Recv() (*StreamEventsResponse, error) {
	m := new(StreamEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *feedClient) StreamSettlements(ctx context.Context, in *StreamSettlementsRequest, opts ...grpc.CallOption) (Feed_StreamSettlementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Feed_serviceDesc.Streams[1], "/xfeed_proto.Feed/StreamSettlements", opts...)
	if err != nil {
		return nil, err
	}
	x := &feedStreamSettlementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Feed_StreamSettlementsClient interface {
	Recv() (*StreamSettlementsResponse, error)
	grpc.ClientStream
}

type feedStreamSettlementsClient struct {
	grpc.ClientStream
}

func (x *feedStreamSettlementsClient) Recv() (*StreamSettlementsResponse, error) {
	m := new(StreamSettlementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *feedClient) GetSportDescriptions(ctx context.Context, in *SportDescriptionsRequest, opts ...grpc.CallOption) (*SportDescriptionsResponse, error) {
	out := new(SportDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/xfeed_proto.Feed/GetSportDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServer is the server API for Feed service.
type FeedServer interface {
	StreamEvents(*StreamEventsRequest, Feed_StreamEventsServer) error
	StreamSettlements(*StreamSettlementsRequest, Feed_StreamSettlementsServer) error
	GetSportDescriptions(context.Context, *SportDescriptionsRequest) (*SportDescriptionsResponse, error)
}

func RegisterFeedServer(s *grpc.Server, srv FeedServer) {
	s.RegisterService(&_Feed_serviceDesc, srv)
}

func _Feed_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeedServer).StreamEvents(m, &feedStreamEventsServer{stream})
}

type Feed_StreamEventsServer interface {
	Send(*StreamEventsResponse) error
	grpc.ServerStream
}

type feedStreamEventsServer struct {
	grpc.ServerStream
}

func (x *feedStreamEventsServer) Send(m *StreamEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Feed_StreamSettlements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSettlementsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeedServer).StreamSettlements(m, &feedStreamSettlementsServer{stream})
}

type Feed_StreamSettlementsServer interface {
	Send(*StreamSettlementsResponse) error
	grpc.ServerStream
}

type feedStreamSettlementsServer struct {
	grpc.ServerStream
}

func (x *feedStreamSettlementsServer) Send(m *StreamSettlementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Feed_GetSportDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SportDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetSportDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfeed_proto.Feed/GetSportDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetSportDescriptions(ctx, req.(*SportDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Feed_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xfeed_proto.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSportDescriptions",
			Handler:    _Feed_GetSportDescriptions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _Feed_StreamEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamSettlements",
			Handler:       _Feed_StreamSettlements_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xfeed_proto/endpoint.proto",
}

func init() {
	proto.RegisterFile("xfeed_proto/endpoint.proto", fileDescriptor_endpoint_09daadb9810f32ba)
}

var fileDescriptor_endpoint_09daadb9810f32ba = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0x39, 0xce, 0xc2, 0x30,
	0x10, 0x46, 0xff, 0x1f, 0x21, 0x0a, 0x43, 0x83, 0x45, 0xe5, 0x86, 0x9d, 0x32, 0x20, 0xb8, 0x02,
	0x4b, 0x4f, 0x0a, 0xca, 0x08, 0xf0, 0x04, 0x45, 0x22, 0xb6, 0xf1, 0x0c, 0x88, 0x63, 0x71, 0x44,
	0x84, 0xa3, 0x20, 0x27, 0x6c, 0xa5, 0xf5, 0xde, 0xa7, 0xe7, 0x61, 0xe2, 0x1a, 0x03, 0xc8, 0xc8,
	0x58, 0x4d, 0x7a, 0x0c, 0x4a, 0x1a, 0x9d, 0x28, 0x0a, 0xdc, 0x93, 0xd7, 0x3d, 0x26, 0xda, 0x05,
	0xf1, 0x02, 0x8a, 0x30, 0x42, 0xb2, 0xb0, 0x4d, 0x33, 0x5b, 0xf4, 0x7d, 0x01, 0x81, 0xe8, 0x08,
	0x29, 0x28, 0x2a, 0x4a, 0x83, 0x82, 0x64, 0xb4, 0xa5, 0x48, 0x02, 0xee, 0x6d, 0x62, 0x28, 0xd1,
	0x0a, 0x33, 0x6b, 0x7a, 0xab, 0xb0, 0xea, 0x12, 0x40, 0xf2, 0x0d, 0x6b, 0x84, 0x6e, 0xbe, 0x70,
	0x41, 0xde, 0x09, 0xbc, 0x7d, 0xe0, 0xa3, 0x35, 0x9c, 0xce, 0x80, 0x24, 0xba, 0x5f, 0x0c, 0x34,
	0x5a, 0x21, 0xf4, 0xfe, 0x26, 0xff, 0x3c, 0x66, 0xcd, 0x8c, 0x85, 0xcf, 0x8f, 0x22, 0x1f, 0xbe,
	0xd9, 0x7a, 0x3c, 0x4f, 0x8c, 0x7e, 0x69, 0x5e, 0xe7, 0xc0, 0x5a, 0x2b, 0xa0, 0xf0, 0x71, 0xe8,
	0xdc, 0xbb, 0xb3, 0x9c, 0x2a, 0xf3, 0x0f, 0xa9, 0x57, 0x2d, 0x4f, 0xed, 0x6a, 0x4e, 0x99, 0xdd,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x30, 0xe8, 0x31, 0xd0, 0x01, 0x00, 0x00,
}
